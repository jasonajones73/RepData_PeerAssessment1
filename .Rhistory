x8 <- filter(x7, agency=="EMS")
x9 <- filter(x8, year(calltime)==2016)
final.ems <- filter(x9, priority=="P")
### Remove top and bottom 1% of calls
final.ems <- subset(final.ems, secsdi2ar <= quantile(secsdi2ar, 0.99) & secsdi2ar >= quantile(secsdi2ar, 0.01))
### Convert seconds to minutes and add column
final.ems <- mutate(final.ems, avgResp=secsdi2ar/60)
p4 <- ggplot(final.ems, aes(avgResp)) + geom_histogram(alpha=0.10)
p4
p4 <- ggplot(final.ems, aes(avgResp)) + geom_histogram(alpha=0.3)
p4
p4 <- ggplot(final.ems, aes(avgResp)) + geom_histogram(binwidth=0.4, alpha=0.3)
p4
?rnorm
test <- final.ems %>%
count(avgResp) %>%
group_by(avgResp) %>%
mutate(prop = prop.table(n))
View(test)
test <- final.ems %>%
count(avgResp) %>%
group_by(avgResp) %>%
mutate(prop = prop.table(n)) %>%
ggplot(aes(avgResp, prop, group = district)) +
geom_bar(stat = "identity", position = "dodge")
test
View(final.ems)
test <- final.ems %>%
count(avgResp) %>%
ungroup() %>%
group_by(avgResp) %>%
mutate(prop = prop.table(n)) %>%
ggplot(aes(avgResp, prop, group = district)) +
geom_bar(stat = "identity", position = "dodge")
test
test <- final.ems %>%
count(avgResp, district) %>%
ungroup() %>%
group_by(avgResp) %>%
mutate(prop = prop.table(n)) %>%
ggplot(aes(avgResp, prop, group = district)) +
geom_bar(stat = "identity", position = "dodge")
test
test <- final.ems %>%
count(avgResp) %>%
ungroup() %>%
group_by(avgResp) %>%
mutate(prop = prop.table(n)) %>%
ggplot(aes(prop)) +
geom_histogram()
test
test <- final.ems %>%
count(avgResp) %>%
ungroup() %>%
group_by(avgResp) %>%
mutate(prop = prop.table(n)) %>%
ggplot(aes(avgResp, prop)) +
geom_histogram()
test
test <- final.ems %>%
count(avgResp) %>%
ungroup() %>%
group_by(avgResp) %>%
mutate(prop = prop.table(n)) %>%
ggplot(aes(avgResp)) +
geom_histogram()
test
p4 <- ggplot(final.ems, aes(avgResp)) + geom_histogram()
p4
p4 <- ggplot(final.ems, aes(avgResp)) + geom_histogram() + scale_y_continuous(name = "percent", labels = scales::percent)
p4
?n
p4 <- ggplot(final.ems %>% group_by(avgResp) %>% mutate(w = 1/n()) %>% ungroup()) + aes(avgResp, weight = w) + geom_histogram() + scale_y_continuous(name = "percent", labels = scales::percent)
p4
p4 <- ggplot(final.ems %>% group_by(avgResp) %>% mutate(w = 1/n()) %>% ungroup()) + aes(avgResp, weight = w) + geom_bar(aes(avgResp)) + scale_y_continuous(name = "percent", labels = scales::percent)
p4
test <- final.ems %>%
group_by(avgResp) %>%
mutate(percent = value/sum(value))
test <- final.ems %>%
count(avgResp) %>%
mutate(percent = n/sum(n))
View(test)
test <- final.ems %>%
count(avgResp) %>%
mutate(percent = n/sum(n))
View(test)
View(test)
test <- final.ems %>%
count(avgResp) %>%
mutate(percent = n/sum(n)) %>%
ggplot(aes(avgResp)) + geom_histogram()
test
p4 <- ggplot(final.ems, aes(avgResp)) + geom_density()
p4
p4 <- ggplot(final.ems, aes(avgResp)) + geom_histogram(alpha = 0.3) + geom_density()
p4
p4 <- ggplot(final.ems, aes(avgResp)) + geom_density()
p4
test <- mutate(final.ems, "under2" =  avgResp<2)
View(test)
test <- mutate(test, under4 = avgResp>=2 & avgResp<6)
View(test)
test <- transmute(final.ems, under2 =  avgResp<2)
View(test)
test <- mutate(test, under4 = avgResp>=2 & avgResp<6)
test <- mutate(final.ems, under4 = avgResp>=2 & avgResp<6)
test <- mutate(final.ems, under2 =  avgResp<2)
test <- mutate(final.ems, under4 = avgResp>=2 & avgResp<6)
test <- mutate(final.ems, under2 =  avgResp<2)
test <- mutate(test, under4 = avgResp>=2 & avgResp<6)
test <- mutate(final.ems, under2 =  avgResp<2)
test <- mutate(test, under4 = avgResp>=2 & avgResp<4)
test <- mutate(test, under6 = avgResp>=4 & avgResp<6)
test <- mutate(test, under8 = avgResp>=6 & avgResp<8)
test <- mutate(test, over8 = avgResp>=8)
View(test)
test2 <- count(under2, under4, under6, under8, over8)
test <- mutate(final.ems, under2 =  avgResp<2)
test <- mutate(test, under4 = avgResp>=2 & avgResp<4)
test <- mutate(test, under6 = avgResp>=4 & avgResp<6)
test <- mutate(test, under8 = avgResp>=6 & avgResp<8)
test <- mutate(test, over8 = avgResp>=8)
test2 <- count(under2, under4, under6, under8, over8)
test2 <- count(test, under2, under4, under6, under8, over8)
View(test2)
test2 <- mutate(test2, percent = n/sum(n))
View(test2)
sum(test2$percent)
library(reshape2)
melt(test2)
test3 <- count(final.ems, avgResp)
View(test3)
plot(test3, n/sum(n))
plot(test3, cumsum(n)/sum(n))
test3 <- mutate(test3, percent = n/sum(n))
View(test3)
h = hist(final.ems$avgResp)
h
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
?hist
h = hist(final.ems$avgResp, breaks = 5)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(final.ems$avgResp, breaks = 2)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(final.ems$avgResp, breaks = 4)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(final.ems$avgResp, breaks = 4)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
View(h)
h = hist(final.ems$avgResp, breaks = c(0,2,4,5,8,16))
h = hist(final.ems$avgResp, breaks = c(0,2,4,5,8,16,20))
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(final.ems$avgResp, breaks = c(8,16,20))
h = hist(final.ems$avgResp, breaks = c(0,8,16,20))
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
View(h)
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
## version 3.0.9
# scale_y_continuous(labels = percent_format())
## version 3.1.0
scale_y_continuous(labels=percent)
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
## version 3.0.9
# scale_y_continuous(labels = percent_format())
## version 3.1.0
scale_y_continuous(labels=scales::percent)
testp
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..)) +
scale_y_continuous(labels=scales::percent)
testp
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..), bins = 5) +
scale_y_continuous(labels=scales::percent)
testp
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..), bins = 10) +
scale_y_continuous(labels=scales::percent)
testp
test <- mutate(test, under4 = count(avgResp>=2) & count(avgResp<4)
test <- mutate(test, under4 = count(avgResp>=2) & count(avgResp<4))
test <- mutate(test, under4 = count(avgResp>=2) & count(avgResp<4))
test <- mutate(test, under4 = count(avgResp>=2))
test4 <- count(final.ems, avgResp<8)
View(test4)
test4 <- mutate(test4, percent = n/sum(n)*100)
View(test4)
p4 <- ggplot(final.ems, aes(avgResp)) + geom_density()
p4
h = hist(final.ems$avgResp, breaks = c(0,8,16,20))
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(final.ems$avgResp, breaks = 5)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(final.ems$avgResp, breaks = 2)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
h = hist(final.ems$avgResp, breaks = 20)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..), bins = 10) +
scale_y_continuous(labels=scales::percent)
testp
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..) color = "blue", bins = 10) +
scale_y_continuous(labels=scales::percent)
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..), color = "blue", bins = 10) +
scale_y_continuous(labels=scales::percent)
testp
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..), color = "white", bins = 10) +
scale_y_continuous(labels=scales::percent)
testp
h = hist(final.ems$avgResp, breaks = 10)
h$density = h$counts/sum(h$counts)*100
plot(h, freq = FALSE)
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..), color = "white", bins = 5) +
scale_y_continuous(labels=scales::percent)
testp
testp <-  p <- ggplot(final.ems, aes(x = avgResp)) +
geom_histogram(aes(y=..density..), color = "white", bins = 6) +
scale_y_continuous(labels=scales::percent)
testp
View(test4)
test4 <- count(final.ems, avgResp<8, district)
test4 <- mutate(test4, percent = n/sum(n)*100)
View(test4)
test4 <- count(final.ems, avgResp<8)
test4 <- mutate(test4, percent = n/sum(n)*100)
View(test4)
View(test4)
test4 <- final.ems %>% mutate(under8 = avgResp<8) %>% count(under8)
View(test4)
test4 <- mutate(test4, percent = under8/sum(under8)*100)
View(test4)
n
test4 <- final.ems %>% mutate(under8 = avgResp<8) %>% count(under8)
test4 <- mutate(test4, percent = n/sum(n)*100)
View(test4)
plot(test4)
ggplot(test4, aes(under8, percent)) + geom_bar()
ggplot(test4, aes(under8, percent)) + geom_bar(stat = "identity")
library(plotly)
plot_ly(test4, x=~under8, y=~percent, type = "bar")
plot_ly(test4, x=~under8, y=~percent, type = "pie")
install.packages("tidyquant")
install.packages("forcats")
install.packages("timetk")
library(tidyquant)
library(cranlogs)
library(timetk)
library(stringr)
library(forcats)
x = read_csv("C:/Users/jjones6/Desktop/Carto Test/callsForServiceUpdatedGeocoded.csv")
x = read_csv("C:/Users/jjones6/Desktop/Carto Test/callsForServiceUpdatedGeocoded.csv", col_types = cols(inci_id = col_character(),
parent_id = col_character(),
case_id = col_character(),
callsource = col_character(),
geox = col_number(),
geoy = col_number(),
nature = col_character(),
nature2 = col_character(),
priority = col_character(),
medprior = col_character(),
meddislvl = col_character(),
service = col_character(),
agency = col_character(),
district = col_character(),
statbeat = col_character(),
ra = col_character(),
gp = col_character(),
primeunit = col_character(),
closecode = col_character(),
calldow = col_character(),
firstdisp = col_character())))
x = read_csv("C:/Users/jjones6/Desktop/Carto Test/callsForServiceUpdatedGeocoded.csv", col_types = cols(inci_id = col_character(),
parent_id = col_character(),
case_id = col_character(),
callsource = col_character(),
geox = col_number(),
geoy = col_number(),
nature = col_character(),
nature2 = col_character(),
priority = col_character(),
medprior = col_character(),
meddislvl = col_character(),
service = col_character(),
agency = col_character(),
district = col_character(),
statbeat = col_character(),
ra = col_character(),
gp = col_character(),
primeunit = col_character(),
closecode = col_character(),
calldow = col_character(),
firstdisp = col_character()))
filter(x, agency=="EMS") %>%
ggplot(aes(x = calltime, y = secs2ar, color = district)) +
# Data
geom_point(alpha = 0.5) +
facet_wrap(~ district, ncol = 3, scale = "free_y") +
# Aesthetics
labs(title = "Test", x = "",
subtitle = "Subtitle test",
caption = "Testing tidyquant package on EMS data") +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
filter(x, agency=="EMS") %>%
ggplot(aes(x = calltime, y = secs2ar, color = callsource)) +
# Data
geom_point(alpha = 0.5) +
facet_wrap(~ district, ncol = 3, scale = "free_y") +
# Aesthetics
labs(title = "Test", x = "",
subtitle = "Subtitle test",
caption = "Testing tidyquant package on EMS data") +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
x %>%
ggplot(aes(x = calltime, y = secs2ar, color = agency)) +
# Data
geom_point(alpha = 0.5) +
facet_wrap(~ district, ncol = 3, scale = "free_y") +
# Aesthetics
labs(title = "Test", x = "",
subtitle = "Subtitle test",
caption = "Testing tidyquant package on EMS data") +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
library(lubridate)
filter(x, year(calltime)==2016) %>%
ggplot(aes(x = calltime, y = secs2ar, color = agency)) +
# Data
geom_point(alpha = 0.5) +
facet_wrap(~ agency, ncol = 3, scale = "free_y") +
# Aesthetics
labs(title = "Test", x = "",
subtitle = "Subtitle test",
caption = "Testing tidyquant package on EMS data") +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
### Filter out calls based on criteria provided by EMS
x1 <- filter(x, str_detect(closecode, "[:alpha:]")==FALSE)
x2 <- filter(x1, rptonly==FALSE)
x3 <- filter(x2, str_detect(primeunit, "MA")!=TRUE)
x4 <- filter(x3, callsource!="SELF")
x5 <- filter(x4, secsdi2ar>0)
x6 <- filter(x5, secs2ar>0)
x7 <- filter(x6, secs2di>0)
### Filter for EMS, 2016 calendar year and "P" priority calls
x8 <- filter(x7, agency=="EMS")
x9 <- filter(x8, year(calltime)==2016)
final.ems <- filter(x9, priority=="P")
### Remove top and bottom 1% of calls
final.ems <- subset(final.ems, secsdi2ar <= quantile(secsdi2ar, 0.99) & secsdi2ar >= quantile(secsdi2ar, 0.01))
### Convert seconds to minutes and add column
final.ems <- mutate(final.ems, avgResp=secsdi2ar/60)
final.ems %>%
ggplot(aes(x = calltime, y = secs2ar, color = district)) +
# Data
geom_point(alpha = 0.5) +
facet_wrap(~ district, ncol = 3, scale = "free_y") +
# Aesthetics
labs(title = "Test", x = "",
subtitle = "Subtitle test",
caption = "Testing tidyquant package on EMS data") +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
final.ems %>%
ggplot(aes(x = calltime, y = secs2ar, color = district)) +
# Data
geom_point(alpha = 0.5) +
geom_ribbon() +
facet_wrap(~ district, ncol = 3, scale = "free_y") +
# Aesthetics
labs(title = "Test", x = "",
subtitle = "Subtitle test",
caption = "Testing tidyquant package on EMS data") +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
final.ems %>%
ggplot(aes(x = calltime, y = secs2ar, color = district)) +
# Data
geom_point(alpha = 0.5) +
geom_smooth() +
facet_wrap(~ district, ncol = 3, scale = "free_y") +
# Aesthetics
labs(title = "Test", x = "",
subtitle = "Subtitle test",
caption = "Testing tidyquant package on EMS data") +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
library(tidyverse)
x = read_csv("C:/Users/jjones6/Desktop/Carto Test/callsForServiceUpdatedGeocoded.csv", col_types = cols(inci_id = col_character(),
parent_id = col_character(),
case_id = col_character(),
callsource = col_character(),
geox = col_number(),
geoy = col_number(),
nature = col_character(),
nature2 = col_character(),
priority = col_character(),
medprior = col_character(),
meddislvl = col_character(),
service = col_character(),
agency = col_character(),
district = col_character(),
statbeat = col_character(),
ra = col_character(),
gp = col_character(),
primeunit = col_character(),
closecode = col_character(),
calldow = col_character(),
firstdisp = col_character()))
test <- lm(x$secs2ar ~ x$calltime)
plot(test)
a;lskdfja;sldkfjasdf
a
sdfj;asldkfjas;ldkfjas;oifjawoeifj;zlvknzx;oivhj
lm_wage <- lm(wage ~ age, data = Wage)
# Define data.frame: unseen (coded already)
unseen <- data.frame(age = 60)
# Predict the wage for a 60-year old worker
predict(lm_wage, unseen)
Wage
unseen <- data.frame(time = as.POSIXct("2017-09-09 13:30:00"))
View(unseen)
predict(test, unseen)
test2 <- predict(test, unseen)
test <- lm(secs2ar ~ calltime, data = x)
unseen <- data.frame(time = as.POSIXct("2017-09-09 13:30:00"))
test2 <- predict(test, unseen)
unseen <- data.frame(calltime = as.POSIXct("2017-09-09 13:30:00"))
test2 <- predict(test, unseen)
test3 <- test2/60
x1 <- filter(x, str_detect(closecode, "[:alpha:]")==FALSE)
library(stringr)
x1 <- filter(x, str_detect(closecode, "[:alpha:]")==FALSE)
x2 <- filter(x1, rptonly==FALSE)
x4 <- filter(x3, callsource!="SELF")
x3 <- filter(x1, rptonly==FALSE)
x4 <- filter(x3, callsource!="SELF")
x5 <- filter(x4, secsdi2ar>0)
x6 <- filter(x5, secs2ar>0)
x7 <- filter(x6, secs2di>0)
filterd.calls <- filter(x7, agency=="EMS")
filterd.calls <- filter(x7, agency=="GCSD")
test <- lm(secs2ar ~ calltime, data = filterd.calls)
unseen <- data.frame(calltime = as.POSIXct("2017-09-09 13:30:00"))
test2 <- predict(test, unseen)
test3 <- test2/60
plot(test)
unseen2 <- data.frame(calltime = as.POSIXct("2017-10-09 13:30:00"))
test2 <- predict(test, unseen2)
test3 <- test2/60
unseen <- data.frame(calltime = as.POSIXct("2017-09-09 20:00:00"))
test2 <- predict(test, unseen)
test3 <- test2/60
test <- lm(secs2ar ~ calltime, data = filterd.calls)
library(lubridate)
filterd.calls <- mutate(filterd.calls, hod = hour(calltime))
test <- lm(secs2ar ~ hod, data = filterd.calls)
View(filterd.calls)
unseen <- data.frame(hod = 12)
test2 <- predict(test, unseen)
test3 <- test2/60
unseen <- data.frame(hod = 16)
test2 <- predict(test, unseen)
test3 <- test2/60
unseen <- data.frame(hod = 20)
test2 <- predict(test, unseen)
test3 <- test2/60
unseen <- data.frame(hod = 20)
test2 <- predict(test, unseen)
test3 <- test2/60
unseen <- data.frame(hod = 23)
test2 <- predict(test, unseen)
test3 <- test2/60
unseen <- data.frame(hod = 8)
test2 <- predict(test, unseen)
test3 <- test2/60
install.packages("remotes")
remotes::install_github("krlmlr/styler")
setwd("~/GitHub/RepData_PeerAssessment1")
x <- read_csv("data/activity.csv")
library(tidyverse)
x <- read_csv("data/activity.csv")
library(tidyverse)
x <- read_csv("data/activity.csv")
### Load required packages
library(tidyverse)
